'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * @license
 * linq-to-objects 0.9.1
 * Copyright Sylvain LongepÃ©e
 * Released under MIT license <https://github.com/Sylvain59650/linq-to-objects/blob/master/LICENSE>
 */

;
(function (moduleName, root, factory) {
  if (typeof define === 'function' && define.amd) {
    // define([""], factory);
  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
    module.exports = factory();
  } else {
    Array = factory();
  }
})("ArrayModule", undefined, function () {
  'use strict';

  Array.prototype.where = function (predicate) {
    return this.filter(predicate);
  };

  Array.prototype.add = function (values) {
    for (var i = 0, l = arguments.length; i < l; i++) {
      this.push(arguments[i]);
    }
    return this;
  };

  Array.prototype.addRange = function (array) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = array[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var it = _step.value;
        this.push(it);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return this;
  };

  Array.prototype.clear = function () {
    this.length = 0;
  };

  Array.prototype.removeAll = function (predicate) {
    var arr = [];
    var nb = 0;
    for (var i = 0, len = this.length; i < len; i++) {
      if (!predicate.apply(this[i], [this[i], i])) {
        arr.push(this[i]);
        nb++;
      }
    }
    this.length = 0;
    this.addRange(arr);
    return nb;
  };

  Array.prototype.removeAt = function (position) {
    this.splice(position, 1);
    return this;
  };

  Array.prototype.removeRange = function (position, count) {
    this.splice(position, count);
    return this;
  };

  Array.prototype.insertAt = function (position, value) {
    if (position >= this.length) {
      this.push(value);
      return this;
    }
    var arr = this.slice(0, position);
    arr.push(value);
    arr.addRange(this.slice(position + 1));
    this.clear();
    return this.addRange(arr);
  };

  Array.prototype.insertRangeAt = function (position, values) {
    if (position >= this.length) {
      this.addRange(values);
      return this;
    }
    var arr = this.slice(0, position);
    var right = this.slice(position + 1);
    arr.addRange(values);
    arr.addRange(right);
    this.clear();
    return this.addRange(arr);
  };

  Array.prototype.getRange = function (start, end) {
    return this.slice(start, (end || this.length) + 1);
  };

  Array.prototype.first = function (clause) {
    var f = this.firstOrDefault(clause, null);
    if (f == null) throw new Error("NotFoundException");
    return f;
  };

  Array.prototype.firstOrDefault = function (clause, defaultValue) {
    defaultValue = defaultValue || null;
    if (arguments.length === 0) {
      return this.length > 0 ? this[0] : defaultValue;
    }
    var len = this.length;
    for (var i = 0; i < len; i++) {
      if (clause.apply(this[i], [this[i], i])) {
        return this[i];
      }
    }
    return defaultValue;
  };

  Array.prototype.lastOrDefault = function (predicate, defaultValue) {
    defaultValue = defaultValue || null;
    predicate = predicate || noop;
    if (arguments.length === 0) {
      return this.length > 0 ? this[this.length - 1] : defaultValue;
    }
    var len = this.length;
    for (var i = len - 1; i >= 0; i--) {
      if (predicate.apply(this[i], [this[i], i])) {
        return this[i];
      }
    }
    return defaultValue;
  };

  Array.prototype.last = function (predicate) {
    var f = this.lastOrDefault(predicate, null);
    if (f == null) throw new Error("NotFoundException");
    return f;
  };

  function buildFunction(clause) {
    if (typeof clause == "string") {
      if (clause.indexOf("=>") > 0) {
        var expr = clause.match(/^[(\s]*([^()]*?)[)\s]*=>(.*)/);
        return new Function(expr[1], "return (" + expr[2] + ")");
      } else {
        return new Function("x", "return (x." + clause + ")");
      }
    }
    return clause;
  }

  Array.prototype.findIndex = function (predicate) {
    ensurePredicate(predicate);
    for (var i = 0; i < this.length; i++) {
      if (predicate(this[i])) {
        return i;
      }
    }
    return -1;
  };

  Array.prototype.findLastIndex = function (predicate) {
    ensurePredicate(predicate);
    for (var l = this.length - 1, i = l; i >= 0; i--) {
      if (predicate(this[i])) {
        return i;
      }
    }
    return -1;
  };

  function ensurePredicate(predicate) {
    if (typeof predicate !== "function") {
      throw new Error("Argument is not predicate");
    }
  }

  Array.prototype.findLast = function (predicate) {
    ensurePredicate(predicate);
    for (var l = this.length - 1, i = l; i >= 0; i--) {
      if (predicate(this[i])) {
        return this[i];
      }
    }
    return null;
  };

  Array.prototype.distinct = function (clause, comparer) {
    clause = clause || noop;
    comparer = comparer || defaultComparer;
    var arr = [];
    for (var i = 0; i < this.length; i++) {
      var found = false;
      var val = clause(this[i]);
      for (var j = 0; j < arr.length; j++) {
        if (comparer(val, clause(arr[j])) === 0) {
          found = true;
          break;
        }
      }
      if (!found) {
        arr.push(val);
      }
    }
    return arr;
  };

  function defaultComparer(a, b) {
    return a === b ? 0 : a < b ? -1 : 1;
  }

  Array.prototype.union = function (second, comparer) {
    second = second || [];
    comparer = comparer || defaultComparer;
    return [].concat(_toConsumableArray(this), _toConsumableArray(second)).distinct(noop, comparer);
  };

  Array.prototype.intersect = function (second, comparer) {
    second = second || [];
    comparer = comparer || defaultComparer;
    var that = this;
    var arr = [];
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = this[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var i1 = _step2.value;
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = second[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var i2 = _step3.value;

            if (comparer(i1, i2) === 0) {
              if (arr.findIndex(function (x) {
                return x == i2;
              }, comparer) === -1) {
                arr.push(i2);
              }
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return arr;
  };

  Array.prototype.selectNew = function () {
    var arr = [];

    for (var _len = arguments.length, fieldsNames = Array(_len), _key = 0; _key < _len; _key++) {
      fieldsNames[_key] = arguments[_key];
    }

    for (var i = 0; i < this.length; i++) {
      var item = {};
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = fieldsNames[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var f = _step4.value;

          item[f] = this[i][f];
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      arr.push(item);
    }
    return arr;
  };

  Array.prototype.reverse = function (index, count) {
    index = index || 0;
    count = count || this.length - index;
    if (index < 0 || count < 0 || index > this.length || index + count > this.length) {
      return null;
    }
    var arr = [];
    var before = this.slice(0, index);
    var after = this.slice(index + count, this.length);
    var inverse = [];
    for (var i = index + count - 1; i >= index; i--) {
      arr.push(this[i]);
    }
    return [].concat(_toConsumableArray(before), arr, _toConsumableArray(after));
  };

  Array.prototype.orderBy = function (keySelector, comparer) {
    var fn = buildFunction(keySelector);
    comparer = comparer || defaultComparer;
    this.sort(function (a, b) {
      var x = fn.apply(a, [a]);
      var y = fn.apply(b, [b]);
      return comparer(x, y);
    });
    return this;
  };

  Array.prototype.orderByDescending = function (keySelector, comparer) {
    var fn = buildFunction(keySelector);
    comparer = comparer || defaultComparer;
    this.sort(function (a, b) {
      var y = fn.apply(a, [a]);
      var x = fn.apply(b, [b]);
      return comparer(y, x);
    });
    return this;
  };

  Array.prototype.count = function (predicate) {
    if (arguments.length === 0) return this.length;
    ensurePredicate(predicate);
    var nb = 0;
    var len = this.length;
    for (var i = 0; i < len; i++) {
      if (predicate.apply(this[i], [this[i], i])) {
        nb++;
      }
    }
    return nb;
  };

  Array.prototype.all = function (clause) {
    return this.count(clause) === this.length;
  };

  Array.prototype.any = function (clause) {
    return this.count(clause) > 0;
  };

  Array.prototype.skip = function (num) {
    return this.slice(num || 1, this.length);
  };

  Array.prototype.skipWhile = function (clause) {
    return this.slice(this.whileIndex(clause), this.length);
  };

  Array.prototype.whileIndex = function (clause) {
    var len = this.length;
    for (var i = 0; i < len; i++) {
      if (!clause.apply(this[i], [this[i], i])) {
        return i;
      }
    }
    return len - 1;
  };

  Array.prototype.takeWhile = function (clause) {
    return this.slice(0, this.whileIndex(clause));
  };

  Array.prototype.equals = function (array) {
    if (array == null) return false;
    if (array.length != this.length) return false;
    for (var i = 0, l = array.length; i < l; i++) {
      if (this[i] != array[i]) return false;
    }
    return true;
  };

  Array.prototype.sequenceEqual = Array.prototype.equals;

  Array.prototype.trueForAll = Array.prototype.all;

  function noop(x) {
    return x;
  }

  Array.Identity = noop;

  Array.prototype.aggregate = function (initial, accumulate, selector) {
    if (this.length === 0) return null;
    var start = 0;
    if (typeof initial === "function") {
      selector = accumulate;
      selector = selector || noop;
      accumulate = initial;
      initial = selector(this[0]);
      start = 1;
    }
    selector = selector || noop;
    for (var i = start; i < this.length; i++) {
      initial = accumulate(initial, selector(this[i]));
    }
    return initial;
  };

  Array.prototype.sum = function (selector) {
    return this.aggregate(0, function (x, y) {
      return x + y;
    }, selector);
  };

  Array.prototype.average = function (selector) {
    if (this.length === 0) return null;
    return this.aggregate(0, function (x, y) {
      return x + y;
    }, selector) / this.length;
  };

  Array.prototype.min = function (selector, defaultValue) {
    if (this.length === 0) return defaultValue || null;
    selector = selector || noop;
    var m = selector(this[0]);
    return this.aggregate(m, function (x, y) {
      return x < y ? x : y;
    }, selector);
  };

  Array.prototype.max = function (selector, defaultValue) {
    if (this.length === 0) return defaultValue || null;
    selector = selector || noop;
    var m = selector(this[0]);
    return this.aggregate(m, function (x, y) {
      return x < y ? y : x;
    }, selector);
  };

  Array.prototype.groupBy = function (predicat) {
    var map = {};
    this.map(function (element) {
      var key = predicat(element);
      map[key] = map[key] || [];
      map[key].push(element);
    });

    var arr = [];
    for (var k in map) {
      var item = { key: k, elements: map[k] };
      arr.push(item);
    }
    return arr;
  };

  Array.prototype.innerJoin = function (array, conditions, newPropertyName) {
    if (array) {
      var ar = array.length;
      var cc = conditions.split("=");
      var leftPropertyName = cc[0].trim();
      var rightPropertyName = "";
      if (cc.length > 1) {
        rightPropertyName = cc[1].trim();
      } else {
        rightPropertyName = leftPropertyName;
      }
      newPropertyName = newPropertyName || rightPropertyName;
      var props = _.castArray(newPropertyName);
      for (var i = this.length - 1; i >= 0; i--) {
        var item = this[i];
        var found = false;
        for (var j = 0; j < ar; j++) {
          var right = array[j];
          if (item[leftPropertyName] == right[rightPropertyName]) {
            found = true;
            for (var kk = 0; kk < props.length; kk++) {
              var propName = props[kk];
              item[propName] = right[propName];
            }
          }
        }
        if (!found) {
          this.splice(i, 1);
        }
      }
    }
    return this;
  };

  Array.castArray = function (obj) {
    if (obj == null) return [];
    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == "object" && obj.length) return obj;
    return [obj];
  };

  Array.prototype.leftJoin = function (array, conditions, fieldsRight, newFieldName) {
    if (array) {
      var ar = array.length;
      var cc = conditions.split("=");
      var leftPropertyName = cc[0].trim();
      var rightPropertyName = "";
      if (cc.length > 1) {
        rightPropertyName = cc[1].trim();
      } else {
        rightPropertyName = leftPropertyName;
      }
      var fullObject = fieldsRight == undefined;
      //newPropertyName = newPropertyName || rightPropertyName;
      if (!fullObject) {
        var props = Array.castArray(fieldsRight);
      }

      for (var i = 0, al = this.length; i < al; i++) {
        var item = this[i];
        for (var j = 0; j < ar; j++) {
          var right = array[j];
          if (item[leftPropertyName] == right[rightPropertyName]) {
            if (fullObject) {
              item[newFieldName] = right;
            } else {
              for (var kk = 0; kk < props.length; kk++) {
                var propName = props[kk];
                item[propName] = right[propName];
              }
            }
          }
        }
      }
    }
    return this;
  };

  Array.prototype.forEach = function (action) {
    for (var i = 0, len = this.length; i < len; i++) {
      action.apply(this[i], [this[i], i]);
    }
    return this;
  };

  return Array;
});